{"version":3,"file":"static/js/410.f7fec310.chunk.js","mappings":"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","sources":["components/ErrorMessage.jsx","components/MovieListItem.jsx","pages/SearchPage.jsx","services/api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return <p className=\"error\">{message}</p>;\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { imgPath } from 'services/api';\nimport css from 'app.module.css';\n\nconst MovieListItem = ({ id, title, path, location }) => {\n  const defaultImg = 'https://via.placeholder.com/150x220';\n  return (\n    <li className={css.movieListItem} key={id}>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        <img\n          src={path ? `${imgPath + path}` : defaultImg}\n          alt={title}\n          width={200}\n        ></img>\n        <h3 className={css.fixedwidthtitle}>{title}</h3>\n      </Link>\n    </li>\n  );\n};\n\nexport default MovieListItem;\n","import ErrorMessage from 'components/ErrorMessage';\nimport Loader from 'components/Loader';\n\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { findbySearchWord } from 'services/api';\nimport MovieListItem from '../components/MovieListItem';\nimport css from 'app.module.css';\n\nconst SearchPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const [movies, setMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const fetchAllPosts = async () => {\n      try {\n        setIsLoading(true);\n        const postData = await findbySearchWord(query);\n\n        setMovies(postData.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAllPosts();\n  }, [query]);\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const searchValue = event.currentTarget.elements.searchPostId.value;\n\n    setSearchParams({ query: searchValue });\n  };\n\n  return (\n    <div>\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <label>\n          <p>Search movie:</p>\n          <input type=\"text\" name=\"searchPostId\" required />\n        </label>\n        <button className={css.btnsearch} type=\"submit\">\n          Search\n        </button>\n      </form>\n\n      <section>\n        {isLoading && <Loader />}\n        {error && <ErrorMessage message={error} />}\n        <ul className={css.movieList}>\n          {movies !== null &&\n            movies.map(movie => (\n              <MovieListItem\n                id={movie.id}\n                title={movie.title}\n                key={movie.id}\n                path={movie.poster_path}\n                location={location}\n              />\n            ))}\n        </ul>\n      </section>\n    </div>\n  );\n};\n\nexport default SearchPage;\n","export const imgPath = 'https://image.tmdb.org/t/p/w200/';\n\nconst fetchData = async url => {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MTYxZTIyYTI0YmJiOWU0OTdjOGZlZDU1NGQ0NjkzMyIsInN1YiI6IjY1Mjk4NTU3MzU4ZGE3MDBjNmYwNzAxNSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.VL6lmG_08LXTLUfrYFhS4bUBBPTIOydGR3Un7j9UxcI',\n    },\n  };\n\n  try {\n    const response = await fetch(url, options);\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n\nexport const findMovieById = async movieId => {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`;\n  return fetchData(url);\n};\n\nexport const findMovieReviewById = async movieId => {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&page=1`;\n  return fetchData(url);\n};\n\nexport const findbySearchWord = async movieId => {\n  const url = `https://api.themoviedb.org/3/search/movie??include_adult=false&language=en-US&page=1&query=${movieId}`;\n  return fetchData(url);\n};\n\nexport const findMovieCastById = async movieId => {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`;\n  return fetchData(url);\n};\n\nexport const fetchAll = async (postId, page) => {\n  const url = 'https://api.themoviedb.org/3/trending/movie/day?language=en-US';\n  return fetchData(url);\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["message","className","id","title","path","location","css","state","from","to","src","imgPath","alt","width","useSearchParams","searchParams","setSearchParams","useLocation","useState","movies","setMovies","isLoading","setIsLoading","error","setError","query","get","useEffect","fetchAllPosts","findbySearchWord","postData","results","onSubmit","event","preventDefault","searchValue","currentTarget","elements","searchPostId","value","type","name","required","map","movie","poster_path","fetchData","url","options","method","headers","accept","Authorization","fetch","response","json","data","console","findMovieById","movieId","findMovieReviewById","findMovieCastById","fetchAll","postId","page","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}